"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable
// TODO: cleanup this file, it's copied as is from Angular CLI.
const core_1 = require("@angular-devkit/core");
const crypto = require("crypto");
const fs = require("fs");
const semver = require("semver");
const require_project_module_1 = require("../require-project-module");
const operators_1 = require("rxjs/operators");
const rxjs_1 = require("rxjs");
exports.NEW_SW_VERSION = '5.0.0-rc.0';
class CliFilesystem {
    constructor(_host, base) {
        this._host = _host;
        this.base = base;
    }
    list(path) {
        return this._host.list(this._resolve(path)).toPromise().then(x => x, _err => []);
    }
    read(path) {
        return this._host.read(this._resolve(path))
            .toPromise()
            .then(content => core_1.virtualFs.fileBufferToString(content));
    }
    hash(path) {
        const sha1 = crypto.createHash('sha1');
        return this.read(path)
            .then(content => sha1.update(content))
            .then(() => sha1.digest('hex'));
    }
    write(path, content) {
        return this._host.write(this._resolve(path), core_1.virtualFs.stringToFileBuffer(content))
            .toPromise();
    }
    _resolve(path) {
        return core_1.join(core_1.normalize(this.base), path);
    }
}
function usesServiceWorker(projectRoot) {
    let swPackageJsonPath;
    try {
        swPackageJsonPath = require_project_module_1.resolveProjectModule(projectRoot, '@angular/service-worker/package.json');
    }
    catch (_) {
        // @angular/service-worker is not installed
        throw new Error(core_1.tags.stripIndent `
    Your project is configured with serviceWorker = true, but @angular/service-worker
    is not installed. Run \`npm install --save-dev @angular/service-worker\`
    and try again, or run \`ng set apps.0.serviceWorker=false\` in your .angular-cli.json.
  `);
    }
    const swPackageJson = fs.readFileSync(swPackageJsonPath).toString();
    const swVersion = JSON.parse(swPackageJson)['version'];
    if (!semver.gte(swVersion, exports.NEW_SW_VERSION)) {
        throw new Error(core_1.tags.stripIndent `
    The installed version of @angular/service-worker is ${swVersion}. This version of the CLI
    requires the @angular/service-worker version to satisfy ${exports.NEW_SW_VERSION}. Please upgrade
    your service worker version.
  `);
    }
    return true;
}
exports.usesServiceWorker = usesServiceWorker;
function augmentAppWithServiceWorker(host, projectRoot, appRoot, outputPath, baseHref) {
    // Path to the worker script itself.
    const distPath = core_1.normalize(outputPath);
    const workerPath = core_1.normalize(require_project_module_1.resolveProjectModule(core_1.getSystemPath(projectRoot), '@angular/service-worker/ngsw-worker.js'));
    const swConfigPath = require_project_module_1.resolveProjectModule(core_1.getSystemPath(projectRoot), '@angular/service-worker/config');
    const safetyPath = core_1.join(core_1.dirname(workerPath), 'safety-worker.js');
    const configPath = core_1.join(appRoot, 'ngsw-config.json');
    return host.exists(configPath).pipe(operators_1.switchMap(exists => {
        if (!exists) {
            throw new Error(core_1.tags.oneLine `
          Error: Expected to find an ngsw-config.json configuration
          file in the ${appRoot} folder. Either provide one or disable Service Worker
          in your angular.json configuration file.`);
        }
        return host.read(configPath);
    }), operators_1.map(content => JSON.parse(core_1.virtualFs.fileBufferToString(content))), operators_1.switchMap(configJson => {
        const Generator = require(swConfigPath).Generator;
        const gen = new Generator(new CliFilesystem(host, outputPath), baseHref);
        return gen.process(configJson);
    }), operators_1.switchMap(output => {
        const manifest = JSON.stringify(output, null, 2);
        return host.read(workerPath).pipe(operators_1.switchMap(workerCode => {
            return rxjs_1.merge(host.write(core_1.join(distPath, 'ngsw.json'), core_1.virtualFs.stringToFileBuffer(manifest)), host.write(core_1.join(distPath, 'ngsw-worker.js'), workerCode));
        }));
    }), operators_1.switchMap(() => host.exists(safetyPath)), 
    // If @angular/service-worker has the safety script, copy it into two locations.
    operators_1.switchMap(exists => {
        if (!exists) {
            return rxjs_1.of(undefined);
        }
        return host.read(safetyPath).pipe(operators_1.switchMap(safetyCode => {
            return rxjs_1.merge(host.write(core_1.join(distPath, 'worker-basic.min.js'), safetyCode), host.write(core_1.join(distPath, 'safety-worker.js'), safetyCode));
        }));
    }), 
    // Remove all elements, reduce them to a single emit.
    operators_1.reduce(() => { })).toPromise();
}
exports.augmentAppWithServiceWorker = augmentAppWithServiceWorker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX2FuZ3VsYXIvc3JjL2FuZ3VsYXItY2xpLWZpbGVzL3V0aWxpdGllcy9zZXJ2aWNlLXdvcmtlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlCQUFpQjtBQUNqQiwrREFBK0Q7QUFDL0QsK0NBQXNHO0FBRXRHLGlDQUFpQztBQUNqQyx5QkFBeUI7QUFDekIsaUNBQWlDO0FBRWpDLHNFQUFpRTtBQUNqRSw4Q0FBd0Q7QUFDeEQsK0JBQTZDO0FBR2hDLFFBQUEsY0FBYyxHQUFHLFlBQVksQ0FBQztBQUczQztJQUNFLFlBQW9CLEtBQXFCLEVBQVUsSUFBWTtRQUEzQyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7SUFBSSxDQUFDO0lBRXBFLElBQUksQ0FBQyxJQUFZO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsSUFBSSxDQUFDLElBQVk7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4QyxTQUFTLEVBQUU7YUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxnQkFBUyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVELElBQUksQ0FBQyxJQUFZO1FBQ2YsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV2QyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNyQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBWSxFQUFFLE9BQWU7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsZ0JBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNoRixTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sUUFBUSxDQUFDLElBQVk7UUFDM0IsTUFBTSxDQUFDLFdBQUksQ0FBQyxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUFFRCwyQkFBa0MsV0FBbUI7SUFDbkQsSUFBSSxpQkFBaUIsQ0FBQztJQUV0QixJQUFJLENBQUM7UUFDSCxpQkFBaUIsR0FBRyw2Q0FBb0IsQ0FBQyxXQUFXLEVBQUUsc0NBQXNDLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLDJDQUEyQztRQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUE7Ozs7R0FJakMsQ0FBQyxDQUFDO0lBQ0gsQ0FBQztJQUVELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXZELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsc0JBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQUksQ0FBQyxXQUFXLENBQUE7MERBQ3NCLFNBQVM7OERBQ0wsc0JBQWM7O0dBRXpFLENBQUMsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQTFCRCw4Q0EwQkM7QUFFRCxxQ0FDRSxJQUFvQixFQUNwQixXQUFpQixFQUNqQixPQUFhLEVBQ2IsVUFBZ0IsRUFDaEIsUUFBZ0I7SUFFaEIsb0NBQW9DO0lBQ3BDLE1BQU0sUUFBUSxHQUFHLGdCQUFTLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsZ0JBQVMsQ0FDMUIsNkNBQW9CLENBQUMsb0JBQWEsQ0FBQyxXQUFXLENBQUMsRUFBRSx3Q0FBd0MsQ0FBQyxDQUMzRixDQUFDO0lBQ0YsTUFBTSxZQUFZLEdBQUcsNkNBQW9CLENBQ3ZDLG9CQUFhLENBQUMsV0FBVyxDQUFDLEVBQzFCLGdDQUFnQyxDQUNqQyxDQUFDO0lBQ0YsTUFBTSxVQUFVLEdBQUcsV0FBSSxDQUFDLGNBQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2pFLE1BQU0sVUFBVSxHQUFHLFdBQUksQ0FBQyxPQUFPLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUVyRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ2pDLHFCQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFJLENBQUMsT0FBTyxDQUFBOzt3QkFFWixPQUFPO21EQUNvQixDQUMxQyxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBcUMsQ0FBQztJQUNuRSxDQUFDLENBQUMsRUFDRixlQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUNqRSxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDbEQsTUFBTSxHQUFHLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXpFLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxFQUVGLHFCQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDL0IscUJBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQixNQUFNLENBQUMsWUFBSyxDQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsRUFBRSxnQkFBUyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQy9FLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUNyQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUMsRUFFRixxQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEMsZ0ZBQWdGO0lBQ2hGLHFCQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ1osTUFBTSxDQUFDLFNBQUUsQ0FBTyxTQUFTLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUMvQixxQkFBUyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxZQUFLLENBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFJLENBQUMsUUFBUSxFQUFFLHFCQUFxQixDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQzdELElBQUksQ0FBQyxLQUFLLENBQUMsV0FBSSxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUN2QyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUM7SUFFRixxREFBcUQ7SUFDckQsa0JBQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FDakIsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUNoQixDQUFDO0FBdkVELGtFQXVFQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlXG4vLyBUT0RPOiBjbGVhbnVwIHRoaXMgZmlsZSwgaXQncyBjb3BpZWQgYXMgaXMgZnJvbSBBbmd1bGFyIENMSS5cbmltcG9ydCB7IFBhdGgsIGpvaW4sIG5vcm1hbGl6ZSwgdmlydHVhbEZzLCBkaXJuYW1lLCBnZXRTeXN0ZW1QYXRoLCB0YWdzIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0IHsgRmlsZXN5c3RlbSB9IGZyb20gJ0Bhbmd1bGFyL3NlcnZpY2Utd29ya2VyL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQgeyByZXNvbHZlUHJvamVjdE1vZHVsZSB9IGZyb20gJy4uL3JlcXVpcmUtcHJvamVjdC1tb2R1bGUnO1xuaW1wb3J0IHsgbWFwLCByZWR1Y2UsIHN3aXRjaE1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgbWVyZ2UsIG9mIH0gZnJvbSBcInJ4anNcIjtcblxuXG5leHBvcnQgY29uc3QgTkVXX1NXX1ZFUlNJT04gPSAnNS4wLjAtcmMuMCc7XG5cblxuY2xhc3MgQ2xpRmlsZXN5c3RlbSBpbXBsZW1lbnRzIEZpbGVzeXN0ZW0ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9ob3N0OiB2aXJ0dWFsRnMuSG9zdCwgcHJpdmF0ZSBiYXNlOiBzdHJpbmcpIHsgfVxuXG4gIGxpc3QocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHJldHVybiB0aGlzLl9ob3N0Lmxpc3QodGhpcy5fcmVzb2x2ZShwYXRoKSkudG9Qcm9taXNlKCkudGhlbih4ID0+IHgsIF9lcnIgPT4gW10pO1xuICB9XG5cbiAgcmVhZChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9ob3N0LnJlYWQodGhpcy5fcmVzb2x2ZShwYXRoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oY29udGVudCA9PiB2aXJ0dWFsRnMuZmlsZUJ1ZmZlclRvU3RyaW5nKGNvbnRlbnQpKTtcbiAgfVxuXG4gIGhhc2gocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBzaGExID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKTtcblxuICAgIHJldHVybiB0aGlzLnJlYWQocGF0aClcbiAgICAgIC50aGVuKGNvbnRlbnQgPT4gc2hhMS51cGRhdGUoY29udGVudCkpXG4gICAgICAudGhlbigoKSA9PiBzaGExLmRpZ2VzdCgnaGV4JykpO1xuICB9XG5cbiAgd3JpdGUocGF0aDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5faG9zdC53cml0ZSh0aGlzLl9yZXNvbHZlKHBhdGgpLCB2aXJ0dWFsRnMuc3RyaW5nVG9GaWxlQnVmZmVyKGNvbnRlbnQpKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVzb2x2ZShwYXRoOiBzdHJpbmcpOiBQYXRoIHtcbiAgICByZXR1cm4gam9pbihub3JtYWxpemUodGhpcy5iYXNlKSwgcGF0aCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZXNTZXJ2aWNlV29ya2VyKHByb2plY3RSb290OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgbGV0IHN3UGFja2FnZUpzb25QYXRoO1xuXG4gIHRyeSB7XG4gICAgc3dQYWNrYWdlSnNvblBhdGggPSByZXNvbHZlUHJvamVjdE1vZHVsZShwcm9qZWN0Um9vdCwgJ0Bhbmd1bGFyL3NlcnZpY2Utd29ya2VyL3BhY2thZ2UuanNvbicpO1xuICB9IGNhdGNoIChfKSB7XG4gICAgLy8gQGFuZ3VsYXIvc2VydmljZS13b3JrZXIgaXMgbm90IGluc3RhbGxlZFxuICAgIHRocm93IG5ldyBFcnJvcih0YWdzLnN0cmlwSW5kZW50YFxuICAgIFlvdXIgcHJvamVjdCBpcyBjb25maWd1cmVkIHdpdGggc2VydmljZVdvcmtlciA9IHRydWUsIGJ1dCBAYW5ndWxhci9zZXJ2aWNlLXdvcmtlclxuICAgIGlzIG5vdCBpbnN0YWxsZWQuIFJ1biBcXGBucG0gaW5zdGFsbCAtLXNhdmUtZGV2IEBhbmd1bGFyL3NlcnZpY2Utd29ya2VyXFxgXG4gICAgYW5kIHRyeSBhZ2Fpbiwgb3IgcnVuIFxcYG5nIHNldCBhcHBzLjAuc2VydmljZVdvcmtlcj1mYWxzZVxcYCBpbiB5b3VyIC5hbmd1bGFyLWNsaS5qc29uLlxuICBgKTtcbiAgfVxuXG4gIGNvbnN0IHN3UGFja2FnZUpzb24gPSBmcy5yZWFkRmlsZVN5bmMoc3dQYWNrYWdlSnNvblBhdGgpLnRvU3RyaW5nKCk7XG4gIGNvbnN0IHN3VmVyc2lvbiA9IEpTT04ucGFyc2Uoc3dQYWNrYWdlSnNvbilbJ3ZlcnNpb24nXTtcblxuICBpZiAoIXNlbXZlci5ndGUoc3dWZXJzaW9uLCBORVdfU1dfVkVSU0lPTikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IodGFncy5zdHJpcEluZGVudGBcbiAgICBUaGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgQGFuZ3VsYXIvc2VydmljZS13b3JrZXIgaXMgJHtzd1ZlcnNpb259LiBUaGlzIHZlcnNpb24gb2YgdGhlIENMSVxuICAgIHJlcXVpcmVzIHRoZSBAYW5ndWxhci9zZXJ2aWNlLXdvcmtlciB2ZXJzaW9uIHRvIHNhdGlzZnkgJHtORVdfU1dfVkVSU0lPTn0uIFBsZWFzZSB1cGdyYWRlXG4gICAgeW91ciBzZXJ2aWNlIHdvcmtlciB2ZXJzaW9uLlxuICBgKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXVnbWVudEFwcFdpdGhTZXJ2aWNlV29ya2VyKFxuICBob3N0OiB2aXJ0dWFsRnMuSG9zdCxcbiAgcHJvamVjdFJvb3Q6IFBhdGgsXG4gIGFwcFJvb3Q6IFBhdGgsXG4gIG91dHB1dFBhdGg6IFBhdGgsXG4gIGJhc2VIcmVmOiBzdHJpbmcsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgLy8gUGF0aCB0byB0aGUgd29ya2VyIHNjcmlwdCBpdHNlbGYuXG4gIGNvbnN0IGRpc3RQYXRoID0gbm9ybWFsaXplKG91dHB1dFBhdGgpO1xuICBjb25zdCB3b3JrZXJQYXRoID0gbm9ybWFsaXplKFxuICAgIHJlc29sdmVQcm9qZWN0TW9kdWxlKGdldFN5c3RlbVBhdGgocHJvamVjdFJvb3QpLCAnQGFuZ3VsYXIvc2VydmljZS13b3JrZXIvbmdzdy13b3JrZXIuanMnKSxcbiAgKTtcbiAgY29uc3Qgc3dDb25maWdQYXRoID0gcmVzb2x2ZVByb2plY3RNb2R1bGUoXG4gICAgZ2V0U3lzdGVtUGF0aChwcm9qZWN0Um9vdCksXG4gICAgJ0Bhbmd1bGFyL3NlcnZpY2Utd29ya2VyL2NvbmZpZycsXG4gICk7XG4gIGNvbnN0IHNhZmV0eVBhdGggPSBqb2luKGRpcm5hbWUod29ya2VyUGF0aCksICdzYWZldHktd29ya2VyLmpzJyk7XG4gIGNvbnN0IGNvbmZpZ1BhdGggPSBqb2luKGFwcFJvb3QsICduZ3N3LWNvbmZpZy5qc29uJyk7XG5cbiAgcmV0dXJuIGhvc3QuZXhpc3RzKGNvbmZpZ1BhdGgpLnBpcGUoXG4gICAgc3dpdGNoTWFwKGV4aXN0cyA9PiB7XG4gICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGFncy5vbmVMaW5lYFxuICAgICAgICAgIEVycm9yOiBFeHBlY3RlZCB0byBmaW5kIGFuIG5nc3ctY29uZmlnLmpzb24gY29uZmlndXJhdGlvblxuICAgICAgICAgIGZpbGUgaW4gdGhlICR7YXBwUm9vdH0gZm9sZGVyLiBFaXRoZXIgcHJvdmlkZSBvbmUgb3IgZGlzYWJsZSBTZXJ2aWNlIFdvcmtlclxuICAgICAgICAgIGluIHlvdXIgYW5ndWxhci5qc29uIGNvbmZpZ3VyYXRpb24gZmlsZS5gLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaG9zdC5yZWFkKGNvbmZpZ1BhdGgpIGFzIE9ic2VydmFibGU8dmlydHVhbEZzLkZpbGVCdWZmZXI+O1xuICAgIH0pLFxuICAgIG1hcChjb250ZW50ID0+IEpTT04ucGFyc2UodmlydHVhbEZzLmZpbGVCdWZmZXJUb1N0cmluZyhjb250ZW50KSkpLFxuICAgIHN3aXRjaE1hcChjb25maWdKc29uID0+IHtcbiAgICAgIGNvbnN0IEdlbmVyYXRvciA9IHJlcXVpcmUoc3dDb25maWdQYXRoKS5HZW5lcmF0b3I7XG4gICAgICBjb25zdCBnZW4gPSBuZXcgR2VuZXJhdG9yKG5ldyBDbGlGaWxlc3lzdGVtKGhvc3QsIG91dHB1dFBhdGgpLCBiYXNlSHJlZik7XG5cbiAgICAgIHJldHVybiBnZW4ucHJvY2Vzcyhjb25maWdKc29uKTtcbiAgICB9KSxcblxuICAgIHN3aXRjaE1hcChvdXRwdXQgPT4ge1xuICAgICAgY29uc3QgbWFuaWZlc3QgPSBKU09OLnN0cmluZ2lmeShvdXRwdXQsIG51bGwsIDIpO1xuICAgICAgcmV0dXJuIGhvc3QucmVhZCh3b3JrZXJQYXRoKS5waXBlKFxuICAgICAgICBzd2l0Y2hNYXAod29ya2VyQ29kZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAgICAgaG9zdC53cml0ZShqb2luKGRpc3RQYXRoLCAnbmdzdy5qc29uJyksIHZpcnR1YWxGcy5zdHJpbmdUb0ZpbGVCdWZmZXIobWFuaWZlc3QpKSxcbiAgICAgICAgICAgIGhvc3Qud3JpdGUoam9pbihkaXN0UGF0aCwgJ25nc3ctd29ya2VyLmpzJyksIHdvcmtlckNvZGUpLFxuICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0pLFxuXG4gICAgc3dpdGNoTWFwKCgpID0+IGhvc3QuZXhpc3RzKHNhZmV0eVBhdGgpKSxcbiAgICAvLyBJZiBAYW5ndWxhci9zZXJ2aWNlLXdvcmtlciBoYXMgdGhlIHNhZmV0eSBzY3JpcHQsIGNvcHkgaXQgaW50byB0d28gbG9jYXRpb25zLlxuICAgIHN3aXRjaE1hcChleGlzdHMgPT4ge1xuICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgcmV0dXJuIG9mPHZvaWQ+KHVuZGVmaW5lZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBob3N0LnJlYWQoc2FmZXR5UGF0aCkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKHNhZmV0eUNvZGUgPT4ge1xuICAgICAgICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgICAgIGhvc3Qud3JpdGUoam9pbihkaXN0UGF0aCwgJ3dvcmtlci1iYXNpYy5taW4uanMnKSwgc2FmZXR5Q29kZSksXG4gICAgICAgICAgICBob3N0LndyaXRlKGpvaW4oZGlzdFBhdGgsICdzYWZldHktd29ya2VyLmpzJyksIHNhZmV0eUNvZGUpLFxuICAgICAgICAgICkgYXMgT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0pLFxuXG4gICAgLy8gUmVtb3ZlIGFsbCBlbGVtZW50cywgcmVkdWNlIHRoZW0gdG8gYSBzaW5nbGUgZW1pdC5cbiAgICByZWR1Y2UoKCkgPT4ge30pLFxuICApLnRvUHJvbWlzZSgpO1xufVxuIl19