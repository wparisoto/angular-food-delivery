"use strict";
// tslint:disable
// TODO: cleanup this file, it's copied as is from Angular CLI.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
exports.ngAppResolve = (resolvePath) => {
    return path.resolve(process.cwd(), resolvePath);
};
const webpackOutputOptions = {
    colors: true,
    hash: true,
    timings: true,
    chunks: true,
    chunkModules: false,
    children: false,
    modules: false,
    reasons: false,
    warnings: true,
    errors: true,
    assets: true,
    version: false,
    errorDetails: false,
    moduleTrace: false,
};
const verboseWebpackOutputOptions = {
    children: true,
    assets: true,
    version: true,
    reasons: true,
    chunkModules: false,
    errorDetails: true,
    moduleTrace: true,
};
function getWebpackStatsConfig(verbose = false) {
    return verbose
        ? Object.assign(webpackOutputOptions, verboseWebpackOutputOptions)
        : webpackOutputOptions;
}
exports.getWebpackStatsConfig = getWebpackStatsConfig;
function getOutputHashFormat(option, length = 20) {
    /* tslint:disable:max-line-length */
    const hashFormats = {
        none: { chunk: '', extract: '', file: '', script: '' },
        media: { chunk: '', extract: '', file: `.[hash:${length}]`, script: '' },
        bundles: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: '', script: `.[hash:${length}]` },
        all: { chunk: `.[chunkhash:${length}]`, extract: `.[contenthash:${length}]`, file: `.[hash:${length}]`, script: `.[hash:${length}]` },
    };
    /* tslint:enable:max-line-length */
    return hashFormats[option] || hashFormats['none'];
}
exports.getOutputHashFormat = getOutputHashFormat;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL2FuZ3VsYXJfZGV2a2l0L2J1aWxkX2FuZ3VsYXIvc3JjL2FuZ3VsYXItY2xpLWZpbGVzL21vZGVscy93ZWJwYWNrLWNvbmZpZ3MvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlCQUFpQjtBQUNqQiwrREFBK0Q7O0FBRS9ELDZCQUE2QjtBQUVoQixRQUFBLFlBQVksR0FBRyxDQUFDLFdBQW1CLEVBQVUsRUFBRTtJQUMxRCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxvQkFBb0IsR0FBRztJQUMzQixNQUFNLEVBQUUsSUFBSTtJQUNaLElBQUksRUFBRSxJQUFJO0lBQ1YsT0FBTyxFQUFFLElBQUk7SUFDYixNQUFNLEVBQUUsSUFBSTtJQUNaLFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxLQUFLO0lBQ2YsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSztJQUNkLFFBQVEsRUFBRSxJQUFJO0lBQ2QsTUFBTSxFQUFFLElBQUk7SUFDWixNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxLQUFLO0lBQ2QsWUFBWSxFQUFFLEtBQUs7SUFDbkIsV0FBVyxFQUFFLEtBQUs7Q0FDbkIsQ0FBQztBQUVGLE1BQU0sMkJBQTJCLEdBQUc7SUFDbEMsUUFBUSxFQUFFLElBQUk7SUFDZCxNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7SUFDYixZQUFZLEVBQUUsS0FBSztJQUNuQixZQUFZLEVBQUUsSUFBSTtJQUNsQixXQUFXLEVBQUUsSUFBSTtDQUNsQixDQUFDO0FBRUYsK0JBQXNDLE9BQU8sR0FBRyxLQUFLO0lBQ25ELE1BQU0sQ0FBQyxPQUFPO1FBQ1osQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsMkJBQTJCLENBQUM7UUFDbEUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO0FBQzNCLENBQUM7QUFKRCxzREFJQztBQVNELDZCQUFvQyxNQUFjLEVBQUUsTUFBTSxHQUFHLEVBQUU7SUFDN0Qsb0NBQW9DO0lBQ3BDLE1BQU0sV0FBVyxHQUFxQztRQUNwRCxJQUFJLEVBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUF3QixPQUFPLEVBQUUsRUFBRSxFQUEwQixJQUFJLEVBQUUsRUFBRSxFQUFtQixNQUFNLEVBQUUsRUFBRSxFQUFFO1FBQ3hILEtBQUssRUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQXdCLE9BQU8sRUFBRSxFQUFFLEVBQTBCLElBQUksRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUc7UUFDekgsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLGVBQWUsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixNQUFNLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFtQixNQUFNLEVBQUUsVUFBVSxNQUFNLEdBQUcsRUFBRztRQUMxSSxHQUFHLEVBQU0sRUFBRSxLQUFLLEVBQUUsZUFBZSxNQUFNLEdBQUcsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFFLE1BQU0sRUFBRSxVQUFVLE1BQU0sR0FBRyxFQUFHO0tBQzNJLENBQUM7SUFDRixtQ0FBbUM7SUFDbkMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQVZELGtEQVVDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGVcbi8vIFRPRE86IGNsZWFudXAgdGhpcyBmaWxlLCBpdCdzIGNvcGllZCBhcyBpcyBmcm9tIEFuZ3VsYXIgQ0xJLlxuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY29uc3QgbmdBcHBSZXNvbHZlID0gKHJlc29sdmVQYXRoOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksIHJlc29sdmVQYXRoKTtcbn07XG5cbmNvbnN0IHdlYnBhY2tPdXRwdXRPcHRpb25zID0ge1xuICBjb2xvcnM6IHRydWUsXG4gIGhhc2g6IHRydWUsIC8vIHJlcXVpcmVkIGJ5IGN1c3RvbSBzdGF0IG91dHB1dFxuICB0aW1pbmdzOiB0cnVlLCAvLyByZXF1aXJlZCBieSBjdXN0b20gc3RhdCBvdXRwdXRcbiAgY2h1bmtzOiB0cnVlLCAvLyByZXF1aXJlZCBieSBjdXN0b20gc3RhdCBvdXRwdXRcbiAgY2h1bmtNb2R1bGVzOiBmYWxzZSxcbiAgY2hpbGRyZW46IGZhbHNlLCAvLyBsaXN0aW5nIGFsbCBjaGlsZHJlbiBpcyB2ZXJ5IG5vaXN5IGluIEFPVCBhbmQgaGlkZXMgd2FybmluZ3MvZXJyb3JzXG4gIG1vZHVsZXM6IGZhbHNlLFxuICByZWFzb25zOiBmYWxzZSxcbiAgd2FybmluZ3M6IHRydWUsXG4gIGVycm9yczogdHJ1ZSxcbiAgYXNzZXRzOiB0cnVlLCAvLyByZXF1aXJlZCBieSBjdXN0b20gc3RhdCBvdXRwdXRcbiAgdmVyc2lvbjogZmFsc2UsXG4gIGVycm9yRGV0YWlsczogZmFsc2UsXG4gIG1vZHVsZVRyYWNlOiBmYWxzZSxcbn07XG5cbmNvbnN0IHZlcmJvc2VXZWJwYWNrT3V0cHV0T3B0aW9ucyA9IHtcbiAgY2hpbGRyZW46IHRydWUsXG4gIGFzc2V0czogdHJ1ZSxcbiAgdmVyc2lvbjogdHJ1ZSxcbiAgcmVhc29uczogdHJ1ZSxcbiAgY2h1bmtNb2R1bGVzOiBmYWxzZSwgLy8gVE9ETzogc2V0IHRvIHRydWUgd2hlbiBjb25zb2xlIHRvIGZpbGUgb3V0cHV0IGlzIGZpeGVkXG4gIGVycm9yRGV0YWlsczogdHJ1ZSxcbiAgbW9kdWxlVHJhY2U6IHRydWUsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2VicGFja1N0YXRzQ29uZmlnKHZlcmJvc2UgPSBmYWxzZSkge1xuICByZXR1cm4gdmVyYm9zZVxuICAgID8gT2JqZWN0LmFzc2lnbih3ZWJwYWNrT3V0cHV0T3B0aW9ucywgdmVyYm9zZVdlYnBhY2tPdXRwdXRPcHRpb25zKVxuICAgIDogd2VicGFja091dHB1dE9wdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzaEZvcm1hdCB7XG4gIGNodW5rOiBzdHJpbmc7XG4gIGV4dHJhY3Q6IHN0cmluZztcbiAgZmlsZTogc3RyaW5nO1xuICBzY3JpcHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE91dHB1dEhhc2hGb3JtYXQob3B0aW9uOiBzdHJpbmcsIGxlbmd0aCA9IDIwKTogSGFzaEZvcm1hdCB7XG4gIC8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuICBjb25zdCBoYXNoRm9ybWF0czogeyBbb3B0aW9uOiBzdHJpbmddOiBIYXNoRm9ybWF0IH0gPSB7XG4gICAgbm9uZTogICAgeyBjaHVuazogJycsICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTogJycgICAgICAgICAgICAgICAgICwgc2NyaXB0OiAnJyB9LFxuICAgIG1lZGlhOiAgIHsgY2h1bms6ICcnLCAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdDogJycsICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGAuW2hhc2g6JHtsZW5ndGh9XWAsIHNjcmlwdDogJycgIH0sXG4gICAgYnVuZGxlczogeyBjaHVuazogYC5bY2h1bmtoYXNoOiR7bGVuZ3RofV1gLCBleHRyYWN0OiBgLltjb250ZW50aGFzaDoke2xlbmd0aH1dYCwgZmlsZTogJycgICAgICAgICAgICAgICAgICwgc2NyaXB0OiBgLltoYXNoOiR7bGVuZ3RofV1gICB9LFxuICAgIGFsbDogICAgIHsgY2h1bms6IGAuW2NodW5raGFzaDoke2xlbmd0aH1dYCwgZXh0cmFjdDogYC5bY29udGVudGhhc2g6JHtsZW5ndGh9XWAsIGZpbGU6IGAuW2hhc2g6JHtsZW5ndGh9XWAsIHNjcmlwdDogYC5baGFzaDoke2xlbmd0aH1dYCAgfSxcbiAgfTtcbiAgLyogdHNsaW50OmVuYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbiAgcmV0dXJuIGhhc2hGb3JtYXRzW29wdGlvbl0gfHwgaGFzaEZvcm1hdHNbJ25vbmUnXTtcbn1cbiJdfQ==